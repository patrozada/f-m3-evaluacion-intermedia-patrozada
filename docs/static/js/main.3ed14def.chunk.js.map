{"version":3,"sources":["components/Card.js","components/PokeList.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","url","name","types","evolution","react_default","a","createElement","className","src","alt","React","Component","PokeList","pokemon","map","item","components_Card","key","id","App","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAyBeA,mLAtBL,IAAAC,EAMJC,KAAKC,MAJLC,EAFIH,EAEJG,IACAC,EAHIJ,EAGJI,KACAC,EAJIL,EAIJK,MACAC,EALIN,EAKJM,UAEF,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,OAAKE,IAAKR,EAAKS,IAAKR,IACpBG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeN,GAC7BG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQL,EAAM,IAC5BE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQL,EAAM,KAE9BE,EAAAC,EAAAC,cAAA,UAAKH,WAhBMO,IAAMC,WCoBVC,mLAlBL,IACCC,EAAUf,KAAKC,MAAfc,QACP,OACET,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACXM,EAAQC,IAAI,SAACC,GAAD,OACXX,EAAAC,EAAAC,cAACU,EAAD,CACEC,IAAKF,EAAKG,GACVjB,KAAMc,EAAKd,KACXC,MAAOa,EAAKb,MACZC,UAAWY,EAAKZ,UAChBH,IAAKe,EAAKf,gBAXCU,IAAMC,WCEvBE,SAAU,CACd,CACEK,GAAI,EACJjB,KAAM,YACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,KACXH,IACE,kFAEJ,CACEkB,GAAI,EACJjB,KAAM,UACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,YACXH,IACE,kFAEJ,CACEkB,GAAI,EACJjB,KAAM,WACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,UACXH,IACE,kFAEJ,CACEkB,GAAI,EACJjB,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,KACXH,IACE,kFAEJ,CACEkB,GAAI,EACJjB,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,aACXH,IACE,kFAEJ,CACEkB,GAAI,EACJjB,KAAM,YACNC,MAAO,CAAC,SAAU,QAClBC,UAAW,aACXH,IACE,kFAEJ,CACEkB,GAAI,EACJjB,KAAM,WACNC,MAAO,CAAC,SACRC,UAAW,KACXH,IACE,kFAEJ,CACEkB,GAAI,EACJjB,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,WACXH,IACE,kFAEJ,CACEkB,GAAI,EACJjB,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,YACXH,IACE,kFAEJ,CACEkB,GAAI,GACJjB,KAAM,WACNC,MAAO,CAAC,OACRC,UAAW,KACXH,IACE,qFAaSmB,MATf,WACE,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACc,EAAD,CACEP,QAASA,MChFGQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ed14def.chunk.js","sourcesContent":["import React from 'react';\n\nclass Card extends React.Component{\n  render(){\n    const {\n      url,\n      name,\n      types,\n      evolution,\n    }=this.props;\n    return(\n      <li className=\"pokeCard\">\n        <img src={url} alt={name}/>\n        <h3 className=\"pokemonName\">{name}</h3>\n        <ul className=\"pokeTypes\">\n          <li className=\"type\">{types[0]}</li>\n          <li className=\"type\">{types[1]}</li>\n        </ul>\n        <h5>{evolution}</h5>\n      </li>\n    )\n  }\n}\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nclass PokeList extends React.Component{\n  render(){\n    const {pokemon}= this.props;\n    return(\n      <ul className=\"listWrap\">\n        {pokemon.map((item)=>\n          <Card \n            key={item.id} \n            name={item.name}\n            types={item.types}\n            evolution={item.evolution}\n            url={item.url}\n          />\n        )}\n    </ul>\n    )\n  }\n}\n\nexport default PokeList;","import React from \"react\";\nimport PokeList from \"./components/PokeList\";\nimport \"./App.css\";\n\n\nconst pokemon = [\n  {\n    id: 1,\n    name: \"bulbasaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"\n  },\n  {\n    id: 2,\n    name: \"ivysaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: \"bulbasaur\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"\n  },\n  {\n    id: 3,\n    name: \"venusaur\",\n    types: [\"poison\", \"grass\"],\n    evolution: \"ivysaur\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"\n  },\n  {\n    id: 4,\n    name: \"charmander\",\n    types: [\"fire\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"\n  },\n  {\n    id: 5,\n    name: \"charmeleon\",\n    types: [\"fire\"],\n    evolution: \"charmander\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"\n  },\n  {\n    id: 6,\n    name: \"charizard\",\n    types: [\"flying\", \"fire\"],\n    evolution: \"charmeleon\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"\n  },\n  {\n    id: 7,\n    name: \"squirtle\",\n    types: [\"water\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"\n  },\n  {\n    id: 8,\n    name: \"wartortle\",\n    types: [\"water\"],\n    evolution: \"squirtle\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"\n  },\n  {\n    id: 9,\n    name: \"blastoise\",\n    types: [\"water\"],\n    evolution: \"wartortle\",\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"\n  },\n  {\n    id: 10,\n    name: \"caterpie\",\n    types: [\"bug\"],\n    evolution: null,\n    url:\n      \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"\n  }\n];\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <PokeList \n        pokemon={pokemon}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}